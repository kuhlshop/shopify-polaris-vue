{
  "vueComponent": "<template>\n  <s-checkbox\n    :accessibility-label=\"accessibilityLabel\"\n    :checked=\"checked\"\n    :default-checked=\"defaultChecked\"\n    :default-indeterminate=\"defaultIndeterminate\"\n    :details=\"details\"\n    :disabled=\"disabled\"\n    :error=\"error\"\n    :id=\"id\"\n    :indeterminate=\"indeterminate\"\n    :label=\"label\"\n    :name=\"name\"\n    :required=\"required\"\n    :value=\"value\"\n    @change=\"$emit('change', $event)\"\n    @input=\"$emit('input', $event)\"\n  >\n    <slot />\n  </s-checkbox>\n</template>\n\n<script setup lang=\"ts\">\ninterface Props {\n  accessibilityLabel?: string;\n  checked?: boolean;\n  defaultChecked?: boolean;\n  defaultIndeterminate?: boolean;\n  details?: string;\n  disabled?: boolean;\n  error?: string;\n  id?: string;\n  indeterminate?: boolean;\n  label?: string;\n  name?: string;\n  required?: boolean;\n  value?: string;\n}\n\ndefineProps<Props>();\n\ndefineEmits<{\n  change: [event: Event];\n  input: [event: Event];\n}>();\n</script>\n",
  "testFile": "import { describe, it, expect } from \"vitest\";\nimport { mount } from \"@vue/test-utils\";\nimport Scheckbox from \"../index.vue\";\n\ndescribe(\"Scheckbox\", () => {\n  it(\"renders properly\", () => {\n    const wrapper = mount(Scheckbox, {\n      slots: {\n        default: \"Test Content\"\n      }\n    });\n    expect(wrapper.text()).toContain(\"Test Content\");\n  });\n\n  it(\"passes props to the web component\", async () => {\n    const wrapper = mount(Scheckbox, {\n      props: {\n        label: \"Test Label\",\n        checked: true\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-checkbox\");\n    expect(webComponent.exists()).toBe(true);\n  });\n\n  it(\"passes accessibility label prop\", () => {\n    const wrapper = mount(Scheckbox, {\n      props: {\n        accessibilityLabel: \"Screen reader label\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-checkbox\");\n    expect(webComponent.attributes(\"accessibility-label\")).toBe(\"Screen reader label\");\n  });\n\n  it(\"passes checked prop\", () => {\n    const wrapper = mount(Scheckbox, {\n      props: {\n        checked: true\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-checkbox\");\n    expect(webComponent.attributes(\"checked\")).toBeDefined();\n  });\n\n  it(\"passes disabled prop\", () => {\n    const wrapper = mount(Scheckbox, {\n      props: {\n        disabled: true\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-checkbox\");\n    expect(webComponent.attributes(\"disabled\")).toBeDefined();\n  });\n\n  it(\"passes error prop\", () => {\n    const wrapper = mount(Scheckbox, {\n      props: {\n        error: \"Error message\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-checkbox\");\n    expect(webComponent.attributes(\"error\")).toBe(\"Error message\");\n  });\n\n  it(\"passes details prop\", () => {\n    const wrapper = mount(Scheckbox, {\n      props: {\n        details: \"Additional context\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-checkbox\");\n    expect(webComponent.attributes(\"details\")).toBe(\"Additional context\");\n  });\n\n  it(\"passes indeterminate prop\", () => {\n    const wrapper = mount(Scheckbox, {\n      props: {\n        indeterminate: true\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-checkbox\");\n    expect(webComponent.attributes(\"indeterminate\")).toBeDefined();\n  });\n\n  it(\"emits change event\", async () => {\n    const wrapper = mount(Scheckbox);\n    const webComponent = wrapper.find(\"s-checkbox\");\n    \n    await webComponent.trigger(\"change\");\n    \n    expect(wrapper.emitted()).toHaveProperty(\"change\");\n    expect(wrapper.emitted(\"change\")).toHaveLength(1);\n  });\n\n  it(\"emits input event\", async () => {\n    const wrapper = mount(Scheckbox);\n    const webComponent = wrapper.find(\"s-checkbox\");\n    \n    await webComponent.trigger(\"input\");\n    \n    expect(wrapper.emitted()).toHaveProperty(\"input\");\n    expect(wrapper.emitted(\"input\")).toHaveLength(1);\n  });\n});\n"
}