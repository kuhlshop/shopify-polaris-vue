{
  "vueComponent": "<template>\n  <s-urlfield\n    :autocomplete=\"autocomplete\"\n    :default-value=\"defaultValue\"\n    :details=\"details\"\n    :disabled=\"disabled\"\n    :error=\"error\"\n    :id=\"id\"\n    :label=\"label\"\n    :label-accessibility-visibility=\"labelAccessibilityVisibility\"\n    :max-length=\"maxLength\"\n    :min-length=\"minLength\"\n    :name=\"name\"\n    :placeholder=\"placeholder\"\n    :read-only=\"readOnly\"\n    :required=\"required\"\n    :value=\"value\"\n    @blur=\"$emit('blur', $event)\"\n    @change=\"$emit('change', $event)\"\n    @focus=\"$emit('focus', $event)\"\n    @input=\"$emit('input', $event)\"\n  >\n    <slot />\n  </s-urlfield>\n</template>\n\n<script setup lang=\"ts\">\ntype URLAutocompleteField = 'url' | 'photo' | 'impp' | 'home impp' | 'mobile impp' | 'fax impp' | 'pager impp';\n\ntype AutocompleteType =\n  | \"on\"\n  | \"off\"\n  | `section-${string} url`\n  | `section-${string} photo`\n  | `section-${string} impp`\n  | `section-${string} home impp`\n  | `section-${string} mobile impp`\n  | `section-${string} fax impp`\n  | `section-${string} pager impp`\n  | \"shipping url\"\n  | \"shipping photo\"\n  | \"shipping impp\"\n  | \"shipping home impp\"\n  | \"shipping mobile impp\"\n  | \"shipping fax impp\"\n  | \"shipping pager impp\"\n  | \"billing url\"\n  | \"billing photo\"\n  | \"billing impp\"\n  | \"billing home impp\"\n  | \"billing mobile impp\"\n  | \"billing fax impp\"\n  | \"billing pager impp\"\n  | `section-${string} shipping url`\n  | `section-${string} shipping photo`\n  | `section-${string} shipping impp`\n  | `section-${string} shipping home impp`\n  | `section-${string} shipping mobile impp`\n  | `section-${string} shipping fax impp`\n  | `section-${string} shipping pager impp`\n  | `section-${string} billing url`\n  | `section-${string} billing photo`\n  | `section-${string} billing impp`\n  | `section-${string} billing home impp`\n  | `section-${string} billing mobile impp`\n  | `section-${string} billing fax impp`\n  | `section-${string} billing pager impp`\n  | URLAutocompleteField;\n\ntype LabelAccessibilityVisibility = \"visible\" | \"exclusive\";\n\ninterface Props {\n  autocomplete?: AutocompleteType;\n  defaultValue?: string;\n  details?: string;\n  disabled?: boolean;\n  error?: string;\n  id?: string;\n  label?: string;\n  labelAccessibilityVisibility?: LabelAccessibilityVisibility;\n  maxLength?: number;\n  minLength?: number;\n  name?: string;\n  placeholder?: string;\n  readOnly?: boolean;\n  required?: boolean;\n  value?: string;\n}\n\ndefineProps<Props>();\n\ndefineEmits<{\n  blur: [event: Event];\n  change: [event: Event];\n  focus: [event: Event];\n  input: [event: Event];\n}>();\n</script>\n",
  "testFile": "import { describe, it, expect } from \"vitest\";\nimport { mount } from \"@vue/test-utils\";\nimport Surlfield from \"../index.vue\";\n\ndescribe(\"Surlfield\", () => {\n  it(\"renders properly\", () => {\n    const wrapper = mount(Surlfield, {\n      slots: {\n        default: \"Test Content\"\n      }\n    });\n    expect(wrapper.text()).toContain(\"Test Content\");\n  });\n\n  it(\"passes props to the web component\", async () => {\n    const wrapper = mount(Surlfield, {\n      props: {\n        label: \"Website URL\",\n        placeholder: \"https://example.com\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-urlfield\");\n    expect(webComponent.exists()).toBe(true);\n    expect(webComponent.attributes(\"label\")).toBe(\"Website URL\");\n    expect(webComponent.attributes(\"placeholder\")).toBe(\"https://example.com\");\n  });\n\n  it(\"passes disabled prop to the web component\", async () => {\n    const wrapper = mount(Surlfield, {\n      props: {\n        disabled: true\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-urlfield\");\n    expect(webComponent.attributes(\"disabled\")).toBeDefined();\n  });\n\n  it(\"passes required prop to the web component\", async () => {\n    const wrapper = mount(Surlfield, {\n      props: {\n        required: true\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-urlfield\");\n    expect(webComponent.attributes(\"required\")).toBeDefined();\n  });\n\n  it(\"passes value prop to the web component\", async () => {\n    const wrapper = mount(Surlfield, {\n      props: {\n        value: \"https://shopify.com\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-urlfield\");\n    expect(webComponent.attributes(\"value\")).toBe(\"https://shopify.com\");\n  });\n\n  it(\"passes error prop to the web component\", async () => {\n    const wrapper = mount(Surlfield, {\n      props: {\n        error: \"Invalid URL\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-urlfield\");\n    expect(webComponent.attributes(\"error\")).toBe(\"Invalid URL\");\n  });\n\n  it(\"passes minLength and maxLength props to the web component\", async () => {\n    const wrapper = mount(Surlfield, {\n      props: {\n        minLength: 10,\n        maxLength: 200\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-urlfield\");\n    expect(webComponent.attributes(\"min-length\")).toBe(\"10\");\n    expect(webComponent.attributes(\"max-length\")).toBe(\"200\");\n  });\n\n  it(\"emits blur event\", async () => {\n    const wrapper = mount(Surlfield);\n    const webComponent = wrapper.find(\"s-urlfield\");\n    \n    await webComponent.trigger(\"blur\");\n    expect(wrapper.emitted()).toHaveProperty(\"blur\");\n  });\n\n  it(\"emits change event\", async () => {\n    const wrapper = mount(Surlfield);\n    const webComponent = wrapper.find(\"s-urlfield\");\n    \n    await webComponent.trigger(\"change\");\n    expect(wrapper.emitted()).toHaveProperty(\"change\");\n  });\n\n  it(\"emits focus event\", async () => {\n    const wrapper = mount(Surlfield);\n    const webComponent = wrapper.find(\"s-urlfield\");\n    \n    await webComponent.trigger(\"focus\");\n    expect(wrapper.emitted()).toHaveProperty(\"focus\");\n  });\n\n  it(\"emits input event\", async () => {\n    const wrapper = mount(Surlfield);\n    const webComponent = wrapper.find(\"s-urlfield\");\n    \n    await webComponent.trigger(\"input\");\n    expect(wrapper.emitted()).toHaveProperty(\"input\");\n  });\n\n  it(\"passes readOnly prop to the web component\", async () => {\n    const wrapper = mount(Surlfield, {\n      props: {\n        readOnly: true\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-urlfield\");\n    expect(webComponent.attributes(\"read-only\")).toBeDefined();\n  });\n\n  it(\"passes autocomplete prop to the web component\", async () => {\n    const wrapper = mount(Surlfield, {\n      props: {\n        autocomplete: \"url\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-urlfield\");\n    expect(webComponent.attributes(\"autocomplete\")).toBe(\"url\");\n  });\n\n  it(\"passes labelAccessibilityVisibility prop to the web component\", async () => {\n    const wrapper = mount(Surlfield, {\n      props: {\n        labelAccessibilityVisibility: \"exclusive\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-urlfield\");\n    expect(webComponent.attributes(\"label-accessibility-visibility\")).toBe(\"exclusive\");\n  });\n});\n"
}