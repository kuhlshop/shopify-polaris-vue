{
  "vueComponent": "<template>\n  <s-dropzone\n    :accept=\"accept\"\n    :accessibility-label=\"accessibilityLabel\"\n    :disabled=\"disabled\"\n    :error=\"error\"\n    :label=\"label\"\n    :label-accessibility-visibility=\"labelAccessibilityVisibility\"\n    :multiple=\"multiple\"\n    :name=\"name\"\n    :required=\"required\"\n    :value=\"value\"\n    @change=\"$emit('change', $event)\"\n    @droprejected=\"$emit('droprejected', $event)\"\n    @input=\"$emit('input', $event)\"\n  >\n    <slot />\n  </s-dropzone>\n</template>\n\n<script setup lang=\"ts\">\n// Type definitions for union types\ntype LabelAccessibilityVisibility = \"visible\" | \"exclusive\";\n\n// Props interface\ninterface Props {\n  accept?: string;\n  accessibilityLabel?: string;\n  disabled?: boolean;\n  error?: string;\n  label?: string;\n  labelAccessibilityVisibility?: LabelAccessibilityVisibility;\n  multiple?: boolean;\n  name?: string;\n  required?: boolean;\n  value?: string;\n}\n\ndefineProps<Props>();\n\n// Events\ndefineEmits<{\n  change: [event: Event];\n  droprejected: [event: Event];\n  input: [event: Event];\n}>();\n</script>\n",
  "testFile": "import { describe, it, expect } from \"vitest\";\nimport { mount } from \"@vue/test-utils\";\nimport Sdropzone from \"../index.vue\";\n\ndescribe(\"Sdropzone\", () => {\n  it(\"renders properly\", () => {\n    const wrapper = mount(Sdropzone, {\n      slots: {\n        default: \"Test Content\"\n      }\n    });\n    expect(wrapper.text()).toContain(\"Test Content\");\n  });\n\n  it(\"passes props to the web component\", async () => {\n    const wrapper = mount(Sdropzone, {\n      props: {\n        label: \"Upload files\",\n        multiple: true\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-dropzone\");\n    expect(webComponent.exists()).toBe(true);\n    expect(webComponent.attributes(\"label\")).toBe(\"Upload files\");\n    expect(webComponent.attributes(\"multiple\")).toBe(\"\");\n  });\n\n  it(\"passes accept prop correctly\", () => {\n    const wrapper = mount(Sdropzone, {\n      props: {\n        accept: \".jpg,.png,.gif\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-dropzone\");\n    expect(webComponent.attributes(\"accept\")).toBe(\".jpg,.png,.gif\");\n  });\n\n  it(\"passes disabled prop correctly\", () => {\n    const wrapper = mount(Sdropzone, {\n      props: {\n        disabled: true\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-dropzone\");\n    expect(webComponent.attributes(\"disabled\")).toBe(\"\");\n  });\n\n  it(\"passes error prop correctly\", () => {\n    const wrapper = mount(Sdropzone, {\n      props: {\n        error: \"File size must be less than 5mb\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-dropzone\");\n    expect(webComponent.attributes(\"error\")).toBe(\"File size must be less than 5mb\");\n  });\n\n  it(\"passes accessibilityLabel prop correctly\", () => {\n    const wrapper = mount(Sdropzone, {\n      props: {\n        accessibilityLabel: \"Upload image of type jpg, png, or gif\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-dropzone\");\n    expect(webComponent.attributes(\"accessibility-label\")).toBe(\"Upload image of type jpg, png, or gif\");\n  });\n\n  it(\"passes labelAccessibilityVisibility prop correctly\", () => {\n    const wrapper = mount(Sdropzone, {\n      props: {\n        labelAccessibilityVisibility: \"exclusive\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-dropzone\");\n    expect(webComponent.attributes(\"label-accessibility-visibility\")).toBe(\"exclusive\");\n  });\n\n  it(\"passes required prop correctly\", () => {\n    const wrapper = mount(Sdropzone, {\n      props: {\n        required: true\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-dropzone\");\n    expect(webComponent.attributes(\"required\")).toBe(\"\");\n  });\n\n  it(\"passes name prop correctly\", () => {\n    const wrapper = mount(Sdropzone, {\n      props: {\n        name: \"file-upload\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-dropzone\");\n    expect(webComponent.attributes(\"name\")).toBe(\"file-upload\");\n  });\n\n  it(\"emits change event\", async () => {\n    const wrapper = mount(Sdropzone);\n    const webComponent = wrapper.find(\"s-dropzone\");\n    \n    await webComponent.trigger(\"change\");\n    \n    expect(wrapper.emitted()).toHaveProperty(\"change\");\n    expect(wrapper.emitted(\"change\")).toHaveLength(1);\n  });\n\n  it(\"emits input event\", async () => {\n    const wrapper = mount(Sdropzone);\n    const webComponent = wrapper.find(\"s-dropzone\");\n    \n    await webComponent.trigger(\"input\");\n    \n    expect(wrapper.emitted()).toHaveProperty(\"input\");\n    expect(wrapper.emitted(\"input\")).toHaveLength(1);\n  });\n\n  it(\"emits droprejected event\", async () => {\n    const wrapper = mount(Sdropzone);\n    const webComponent = wrapper.find(\"s-dropzone\");\n    \n    await webComponent.trigger(\"droprejected\");\n    \n    expect(wrapper.emitted()).toHaveProperty(\"droprejected\");\n    expect(wrapper.emitted(\"droprejected\")).toHaveLength(1);\n  });\n});\n"
}