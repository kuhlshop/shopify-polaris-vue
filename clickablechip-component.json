{
  "vueComponent": "<template>\n  <s-clickablechip\n    :accessibility-label=\"accessibilityLabel\"\n    :color=\"color\"\n    :disabled=\"disabled\"\n    :hidden=\"hidden\"\n    :href=\"href\"\n    :removable=\"removable\"\n    @afterhide=\"$emit('afterhide', $event)\"\n    @click=\"$emit('click', $event)\"\n    @remove=\"$emit('remove', $event)\"\n  >\n    <slot name=\"graphic\" slot=\"graphic\"></slot>\n    <slot></slot>\n  </s-clickablechip>\n</template>\n\n<script setup lang=\"ts\">\ntype ColorKeyword = 'subdued' | 'base' | 'strong';\n\ninterface Props {\n  accessibilityLabel?: string;\n  color?: ColorKeyword;\n  disabled?: boolean;\n  hidden?: boolean;\n  href?: string;\n  removable?: boolean;\n}\n\ndefineProps<Props>();\n\ndefineEmits<{\n  afterhide: [event: Event];\n  click: [event: Event];\n  remove: [event: Event];\n}>();\n</script>\n",
  "testFile": "import { describe, it, expect } from \"vitest\";\nimport { mount } from \"@vue/test-utils\";\nimport Sclickablechip from \"../index.vue\";\n\ndescribe(\"Sclickablechip\", () => {\n  it(\"renders properly\", () => {\n    const wrapper = mount(Sclickablechip, {\n      slots: {\n        default: \"Test Content\"\n      }\n    });\n    expect(wrapper.text()).toContain(\"Test Content\");\n  });\n\n  it(\"passes props to the web component\", async () => {\n    const wrapper = mount(Sclickablechip, {\n      props: {\n        accessibilityLabel: \"Test label\",\n        color: \"strong\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-clickablechip\");\n    expect(webComponent.exists()).toBe(true);\n  });\n\n  it(\"passes accessibilityLabel prop\", () => {\n    const wrapper = mount(Sclickablechip, {\n      props: {\n        accessibilityLabel: \"Test accessibility label\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-clickablechip\");\n    expect(webComponent.attributes(\"accessibility-label\")).toBe(\"Test accessibility label\");\n  });\n\n  it(\"passes color prop\", () => {\n    const wrapper = mount(Sclickablechip, {\n      props: {\n        color: \"subdued\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-clickablechip\");\n    expect(webComponent.attributes(\"color\")).toBe(\"subdued\");\n  });\n\n  it(\"passes disabled prop\", () => {\n    const wrapper = mount(Sclickablechip, {\n      props: {\n        disabled: true\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-clickablechip\");\n    expect(webComponent.attributes(\"disabled\")).toBeDefined();\n  });\n\n  it(\"passes hidden prop\", () => {\n    const wrapper = mount(Sclickablechip, {\n      props: {\n        hidden: true\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-clickablechip\");\n    expect(webComponent.attributes(\"hidden\")).toBeDefined();\n  });\n\n  it(\"passes href prop\", () => {\n    const wrapper = mount(Sclickablechip, {\n      props: {\n        href: \"https://example.com\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-clickablechip\");\n    expect(webComponent.attributes(\"href\")).toBe(\"https://example.com\");\n  });\n\n  it(\"passes removable prop\", () => {\n    const wrapper = mount(Sclickablechip, {\n      props: {\n        removable: true\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-clickablechip\");\n    expect(webComponent.attributes(\"removable\")).toBeDefined();\n  });\n\n  it(\"emits afterhide event\", async () => {\n    const wrapper = mount(Sclickablechip);\n    const webComponent = wrapper.find(\"s-clickablechip\");\n    \n    await webComponent.trigger(\"afterhide\");\n    \n    expect(wrapper.emitted(\"afterhide\")).toBeTruthy();\n  });\n\n  it(\"emits click event\", async () => {\n    const wrapper = mount(Sclickablechip);\n    const webComponent = wrapper.find(\"s-clickablechip\");\n    \n    await webComponent.trigger(\"click\");\n    \n    expect(wrapper.emitted(\"click\")).toBeTruthy();\n  });\n\n  it(\"emits remove event\", async () => {\n    const wrapper = mount(Sclickablechip);\n    const webComponent = wrapper.find(\"s-clickablechip\");\n    \n    await webComponent.trigger(\"remove\");\n    \n    expect(wrapper.emitted(\"remove\")).toBeTruthy();\n  });\n});\n"
}