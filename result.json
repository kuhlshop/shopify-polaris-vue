{
  "vueComponent": "<template>\n  <s-emailfield\n    :autocomplete=\"autocomplete\"\n    :default-value=\"defaultValue\"\n    :details=\"details\"\n    :disabled=\"disabled\"\n    :error=\"error\"\n    :id=\"id\"\n    :label=\"label\"\n    :label-accessibility-visibility=\"labelAccessibilityVisibility\"\n    :max-length=\"maxLength\"\n    :min-length=\"minLength\"\n    :name=\"name\"\n    :placeholder=\"placeholder\"\n    :read-only=\"readOnly\"\n    :required=\"required\"\n    :value=\"value\"\n    @blur=\"$emit('blur', $event)\"\n    @change=\"$emit('change', $event)\"\n    @focus=\"$emit('focus', $event)\"\n    @input=\"$emit('input', $event)\"\n  >\n    <slot />\n  </s-emailfield>\n</template>\n\n<script setup lang=\"ts\">\n// Type definitions\ntype EmailAutocompleteField = 'email' | 'home email' | 'mobile email' | 'fax email' | 'pager email';\n\ntype AutocompleteType = \n  | \"on\" \n  | \"off\" \n  | EmailAutocompleteField \n  | `section-${string} email` \n  | `section-${string} home email` \n  | `section-${string} mobile email` \n  | `section-${string} fax email` \n  | `section-${string} pager email` \n  | \"shipping email\" \n  | \"shipping home email\" \n  | \"shipping mobile email\" \n  | \"shipping fax email\" \n  | \"shipping pager email\" \n  | \"billing email\" \n  | \"billing home email\" \n  | \"billing mobile email\" \n  | \"billing fax email\" \n  | \"billing pager email\" \n  | `section-${string} shipping email` \n  | `section-${string} shipping home email` \n  | `section-${string} shipping mobile email` \n  | `section-${string} shipping fax email` \n  | `section-${string} shipping pager email` \n  | `section-${string} billing email` \n  | `section-${string} billing home email` \n  | `section-${string} billing mobile email` \n  | `section-${string} billing fax email` \n  | `section-${string} billing pager email`;\n\ntype LabelAccessibilityVisibility = \"visible\" | \"exclusive\";\n\n// Props interface\ninterface Props {\n  autocomplete?: AutocompleteType;\n  defaultValue?: string;\n  details?: string;\n  disabled?: boolean;\n  error?: string;\n  id?: string;\n  label?: string;\n  labelAccessibilityVisibility?: LabelAccessibilityVisibility;\n  maxLength?: number;\n  minLength?: number;\n  name?: string;\n  placeholder?: string;\n  readOnly?: boolean;\n  required?: boolean;\n  value?: string;\n}\n\ndefineProps<Props>();\n\n// Events\ndefineEmits<{\n  blur: [event: Event];\n  change: [event: Event];\n  focus: [event: Event];\n  input: [event: Event];\n}>();\n</script>\n",
  "testFile": "import { describe, it, expect } from \"vitest\";\nimport { mount } from \"@vue/test-utils\";\nimport Semailfield from \"../index.vue\";\n\ndescribe(\"Semailfield\", () => {\n  it(\"renders properly\", () => {\n    const wrapper = mount(Semailfield, {\n      slots: {\n        default: \"Test Content\"\n      }\n    });\n    expect(wrapper.text()).toContain(\"Test Content\");\n  });\n\n  it(\"passes props to the web component\", async () => {\n    const wrapper = mount(Semailfield, {\n      props: {\n        label: \"Email address\",\n        placeholder: \"user@example.com\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-emailfield\");\n    expect(webComponent.exists()).toBe(true);\n    expect(webComponent.attributes(\"label\")).toBe(\"Email address\");\n    expect(webComponent.attributes(\"placeholder\")).toBe(\"user@example.com\");\n  });\n\n  it(\"emits blur event\", async () => {\n    const wrapper = mount(Semailfield);\n    const webComponent = wrapper.find(\"s-emailfield\");\n    \n    await webComponent.trigger(\"blur\");\n    expect(wrapper.emitted(\"blur\")).toBeTruthy();\n  });\n\n  it(\"emits change event\", async () => {\n    const wrapper = mount(Semailfield);\n    const webComponent = wrapper.find(\"s-emailfield\");\n    \n    await webComponent.trigger(\"change\");\n    expect(wrapper.emitted(\"change\")).toBeTruthy();\n  });\n\n  it(\"emits focus event\", async () => {\n    const wrapper = mount(Semailfield);\n    const webComponent = wrapper.find(\"s-emailfield\");\n    \n    await webComponent.trigger(\"focus\");\n    expect(wrapper.emitted(\"focus\")).toBeTruthy();\n  });\n\n  it(\"emits input event\", async () => {\n    const wrapper = mount(Semailfield);\n    const webComponent = wrapper.find(\"s-emailfield\");\n    \n    await webComponent.trigger(\"input\");\n    expect(wrapper.emitted(\"input\")).toBeTruthy();\n  });\n\n  it(\"passes boolean props correctly\", async () => {\n    const wrapper = mount(Semailfield, {\n      props: {\n        required: true,\n        disabled: true,\n        readOnly: true\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-emailfield\");\n    expect(webComponent.attributes(\"required\")).toBeDefined();\n    expect(webComponent.attributes(\"disabled\")).toBeDefined();\n    expect(webComponent.attributes(\"read-only\")).toBeDefined();\n  });\n\n  it(\"passes string props correctly\", async () => {\n    const wrapper = mount(Semailfield, {\n      props: {\n        value: \"test@example.com\",\n        error: \"Invalid email\",\n        details: \"Help text\"\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-emailfield\");\n    expect(webComponent.attributes(\"value\")).toBe(\"test@example.com\");\n    expect(webComponent.attributes(\"error\")).toBe(\"Invalid email\");\n    expect(webComponent.attributes(\"details\")).toBe(\"Help text\");\n  });\n\n  it(\"passes number props correctly\", async () => {\n    const wrapper = mount(Semailfield, {\n      props: {\n        minLength: 5,\n        maxLength: 100\n      }\n    });\n    \n    const webComponent = wrapper.find(\"s-emailfield\");\n    expect(webComponent.attributes(\"min-length\")).toBe(\"5\");\n    expect(webComponent.attributes(\"max-length\")).toBe(\"100\");\n  });\n});\n"
}